--회원가입 테이블
create table mvcregister(
 id number constraint pk_mvcregister_id primary key,
 pwd varchar2(20) not null,
 email varchar2(20) not null
);

Model2 기반 MVC
MODEL
--DTO : mvcregister 테이블 같은 구조의 클래스 (getter , setter )구현
--DAO : CRUD 함수 (DB 연동 connection pool (DBCP))
--SERVICE 현재 생략

VIEW
--jsp (EL & JSTL)  > servlet 쪽에서 저장(request객체), view지정 , forward 한  데이터 가지고 출력
                   > ${requestScope.list}
--보안상 > WEB-INF > Register 폴더  관리

CONTROLLER
--frontcontroller 역할  servlet (하나의 servlet 모든 요청 받고 처리)
--Client [요청을 받고] , [판단]하고 , 업무 수행 , 데이터 담고 , view 지정 , forward

판단   1. command 방식 :  servlet.do?cmd=login&id=kglim&pwd=1004   > cmd > if(cmd.equals("login"))
      2. url 방식 :      login.do?id=kglim&pwd=1004  :  login.do > url 주소로 요청을 판단


1. 연결 테스트 (context.xml , jsp)

2. package 구조 설정

### 테이블 생성 > DTO > POOL생성 > DAO에 함수만들기 > VIEW의 디자인만(UI) > CONTROLLER

-------------------------------
Controller > 요청받고 > 판단 > 서비스실행(DB, 암호화 등등)> 작업
							(DTO생성, DAO생성 ...)

위 작업의 문제점
-> Controller가 가지는 코드양이 많다
-> 추후 업무가 추가되거나 변경되었을 때 유지보수가 힘들다

해결

서비스실행부분을 분리!! >> Service 영역을 만들어서 위임 (DTO, DAO, 암호화, 알고리즘적용 등등)

서비스를 좀 더 깔끔하게 만들 수 없을까 ? >> 표준화된 설계방법 ( -> 인터페이스 기반!)
협업시, 어떤 개발자가 코딩을 해도 같은 양식의 작업을 하도록 하겠다.
Action 인터페이스를 구현하도록 강제할 것!

